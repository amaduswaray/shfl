
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Status {
    LOBBY
    ONGOING
    END
}

// TODO: Update to spotify values
enum Period {
    short_term
    medium_term
    long_term
}

model Game {
  id        String    @default(cuid()) @id
  sessionId String    @unique
  title     String
  players   User[]    @relation("players")
  host      User?     @relation("host", fields: [hostId], references: [id])
  hostId    String?
  status    Status
  songCount Int         @default(2)
  songPeriod Period
}
// songIndexes Int[] // This can be handled on the client side


model User {
  id            String      @default(cuid()) @id
  name          String?
  email         String?     @unique
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  gamesPlayed   Int         @default(0)
  shotsGiven    Int         @default(0)
  shotsTaken    Int         @default(0)
  playlistId    String?
  ready         Boolean     @default(false)
  gameSongs     String[]    @default([])
  games         Game[]      @relation("players")
  hostedGames   Game[]      @relation("host")
  @@map(name: "users")
}


// For game songs, in the api call, set the current uris to [] before setting it to the fetch tracks


